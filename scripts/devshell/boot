#!/bin/bash
# Copyright 2017 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

### run bootserver in zedboot disk paver mode

## usage: fx boot [<type>] [--no-data] [bootserver arguments]
##   <type>     For example, efi, cros, bootfs, or ram (default: bootfs)
##   --no-data  Use FVM images without a /data partition (preserve existing data)
##
## If <type> is omitted, and $FUCHSIA_ARCH is x86, all x86 images will be
## supplied. For other architectures there is no default <type>.

set -e

source "$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"/lib/image_build_vars.sh

declare -a disks=()
ramdisk="${FUCHSIA_BUILD_DIR}/${ramdisk_bin}"
add_fvm=true

usage() {
    fx-command-help
    fx-machine-types
    echo
    echo "Additional bootserver arguments:"
    exec "${ZIRCON_TOOLS_DIR}/bootserver" --help
}

if [[ "$1" =~ ^- ]]; then
  case "$1" in
  -h|--help)
    usage
  ;;
  esac
  machine_type=""

else
  machine_type="$1"
  # passing no arguments is valid, but shift will terminate with set -e
  if [[ $# -ge 1 ]]; then
    shift
  fi
fi

case "${machine_type}" in
  help)
    usage
  ;;
  zedboot)
    ramdisk="${FUCHSIA_BUILD_DIR}/images/zedboot-${ZIRCON_PROJECT}.bin"
    disks=()
    add_fvm=false
  ;;
  ram|netboot|--netboot)
    ramdisk="${FUCHSIA_BUILD_DIR}/netboot-${ZIRCON_PROJECT}.bin"
    disks=()
    add_fvm=false
  ;;
  bootfs|--bootfs)
    echo
    echo "bootfs is deprecated, please try to use \"ram\" instead"
    echo
    sleep 5
    ramdisk="${FUCHSIA_BUILD_DIR}/user.bootfs"
    disks=()
    add_fvm=false
  ;;
  efi|acer|nuc)
    disks=("${disks[@]}" --efi "${FUCHSIA_BUILD_DIR}/${efi_block}")
  ;;
  cros|pixel|vboot)
    disks=("${disks[@]}" --kernc "${FUCHSIA_BUILD_DIR}/${kernc_vboot}")
  ;;
  *)
    if [[ -z "${machine_type}" ]] && [[ "$FUCHSIA_ARCH" == "x86-64" ]]; then
      machine_type="x86"
      disks=("${disks[@]}" --efi "${FUCHSIA_BUILD_DIR}/${efi_block}" \
        --kernc "${FUCHSIA_BUILD_DIR}/${kernc_vboot}")
    else
      echo "Unsupported machine type: \"${machine_type}\""
      fx-machine-types
      exit 1
    fi
esac

# XXX(raggi): this is ugly, but we want to retain argument pass-through to
# bootserver
bootserver_args=()
if ! $add_fvm; then
  bootserver_args=("$@")
else
  disks=("${disks[@]}" --fvm "${FUCHSIA_BUILD_DIR}/${fvm_sparse_block}")
  add_data=true

  while [[ $# -gt 0 ]]; do
    case "$1" in
      --no-data)
        echo "##"
        echo "## Note: if the target has no pre-existing data partition, then"
        echo "## none will be created. The resultant system will behave in a"
        echo "## kind of 'incognito' fashion, as /data will be backed by ram."
        echo "##"
        add_data=false
        shift
        ;;
      *)
        bootserver_args=("${bootserver_args[@]}" "$1")
        shift
        ;;
    esac
  done

  if $add_data; then
    disks=("${disks[@]}" --fvm "${FUCHSIA_BUILD_DIR}/${fvm_data_sparse_block}")
  fi
fi

exec "${ZIRCON_TOOLS_DIR}/bootserver" \
  "${disks[@]}" \
  "${ZIRCON_BUILD_DIR}/${zircon_bin}" \
  "${ramdisk}" \
  "${bootserver_args[@]}"
